@page "/"
@using BlazorAISearch.Models
@using OpenAI.Chat
@using Azure.AI.OpenAI.Chat
@using Microsoft.AspNetCore.Components.Web
@using System.Text
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@rendermode InteractiveServer
@inject BlazorAISearch.Services.RagChatService ChatService
@inject ILogger<Index> Logger
@inject IJSRuntime JSRuntime

@*
 * Main chat interface that demonstrates Retrieval Augmented Generation (RAG)
 * using Azure OpenAI combined with Azure AI Search.
 *
 * Key features:
 * - Sends user queries to the RagChatService for processing
 * - The service uses hybrid search (vector + keyword) with semantic reranking
 * - Retrieved knowledge is used to ground the AI's responses
 * - Citations are displayed as interactive links that reveal the source content
 *
 * This implementation showcases how to create an AI assistant that provides 
 * accurate, factual responses based on your own data.
 *@

<PageTitle>Chat with your data</PageTitle>

<div class="d-flex flex-column vh-100 w-100">
    <div class="bg-light border-bottom p-3">
        <h2 class="text-center m-0">Chat with your data</h2>
    </div>
    
    <div class="flex-grow-1 overflow-auto bg-light w-100 px-3" id="chat-container" style="scroll-behavior: smooth;">
        @if (ChatHistory.Count > 0)
        {
            @foreach (var message in ChatHistory)
            {
                <div class="d-flex mb-4 @(message is UserChatMessage ? "justify-content-end" : "")">
                    <div class="card @(message is UserChatMessage ? "user-card" : "assistant-card")" style="max-width: 80%;">
                        <div class="card-body">
                            <div style="line-height: 1.5;">
                                @if (message is UserChatMessage userMessage)
                                {
                                    @((MarkupString)(userMessage.Content[0].Text ?? string.Empty).Replace("\n", "<br>"))
                                }
                                else if (message is AssistantMessageWithCitations assistantMessageWithCitations)
                                {
                                    @foreach (var (contentPart, index) in assistantMessageWithCitations.Content.Select((part, i) => (part, i)))
                                    {
                                        @if (index > 0)
                                        {
                                            <br />
                                        }
                                        @((MarkupString)(FormatWithCitations(contentPart.Text ?? string.Empty, assistantMessageWithCitations.Citations)))
                                    }
                                }
                                else if (message is AssistantChatMessage assistantChatMessage)
                                {
                                    @foreach (var (contentPart, index) in assistantChatMessage.Content.Select((part, i) => (part, i)))
                                    {
                                        @if (index > 0)
                                        {
                                            <br />
                                        }
                                        @((MarkupString)((contentPart.Text ?? string.Empty).Replace("\n", "<br>")))
                                    }
                                }
                            </div>
                        </div>
                        <div class="card-footer border-0 d-flex @(message is UserChatMessage ? "justify-content-end" : "justify-content-start")">
                            <div class="avatar-badge @(message is UserChatMessage ? "user-avatar-badge" : "assistant-avatar-badge")">
                                @(message is UserChatMessage ? "You" : "AI")
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="text-center d-flex flex-column justify-content-center align-items-center h-100">
                <div style="color: #6c757d; font-size: 4rem;">ðŸ’¬</div>
                <h3 class="fw-bold mt-3">Chat with your data</h3>
                <p class="text-muted mb-4">Ask a question about your data using the text box below.</p>
                <div class="d-flex justify-content-center">
                    <div class="card bg-white" style="max-width: 450px;">
                        <div class="card-body p-4">
                            <h5 class="mb-3">Try asking about:</h5>
                            <ul class="list-unstyled">
                                <li class="mb-2">â€¢ Personal information</li>
                                <li class="mb-2">â€¢ Warranty claim</li>
                                <li class="mb-2">â€¢ About the company</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        }
        
        @if (IsLoading)
        {
            <div class="d-flex mb-4">
                <div class="card assistant-card" style="max-width: 60%;">
                    <div class="card-body p-3">
                        <div class="loading-indicator justify-content-center">
                            <span></span>
                            <span></span>
                            <span></span>
                        </div>
                    </div>
                    <div class="card-footer border-0 d-flex">
                        <div class="avatar-badge assistant-avatar-badge">AI</div>
                    </div>
                </div>
            </div>
        }
    </div>
    
    <div class="border-top bg-white p-2">
        <div class="mx-2 mb-3 overflow-auto">
            <div class="d-flex gap-2 flex-wrap">
                <button type="button" class="btn btn-outline-primary btn-sm rounded-pill" @onclick="@(() => SendQueryWithText("What does Contoso do with my personal information?"))" disabled="@IsLoading">
                    Personal information
                </button>
                <button type="button" class="btn btn-outline-primary btn-sm rounded-pill" @onclick="@(() => SendQueryWithText("How do I file a warranty claim?"))" disabled="@IsLoading">
                    Warranty claim
                </button>
                <button type="button" class="btn btn-outline-primary btn-sm rounded-pill" @onclick="@(() => SendQueryWithText("Tell me about your company?"))" disabled="@IsLoading">
                    About the company
                </button>
            </div>
        </div>
        
        <form @onsubmit="HandleFormSubmit" @onsubmit:preventDefault>
            <div class="input-group rounded-pill overflow-hidden">
                <input type="text" class="form-control border-0 py-2" 
                       @bind-value="CurrentQuery" 
                       @bind-value:event="oninput"
                       @onkeydown="@HandleKeyDown" 
                       placeholder="Type your message..." 
                       disabled="@IsLoading"
                       style="border-top-left-radius: 50rem; border-bottom-left-radius: 50rem;" />
                <button type="submit" class="btn btn-primary" disabled="@(IsLoading || string.IsNullOrWhiteSpace(CurrentQuery))"
                        style="border-top-right-radius: 50rem; border-bottom-right-radius: 50rem;">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                        <path d="M15.964.686a.5.5 0 0 0-.65-.65L.767 5.855H.766l-.452.18a.5.5 0 0 0-.082.887l.41.26.001.002 4.995 3.178 3.178 4.995.002.002.26.41a.5.5 0 0 0 .886-.083l6-15Zm-1.833 1.89L6.637 10.07l-.215-.338a.5.5 0 0 0-.154-.154l-.338-.215 7.494-7.494 1.178-.471-.47 1.178Z"/>
                    </svg>
                </button>
            </div>
        </form>
        
        @if (ErrorMessage != null)
        {
            <div class="alert alert-danger mt-3 d-flex" role="alert">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="me-2" viewBox="0 0 16 16">
                    <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
                </svg>
                <div>@ErrorMessage</div>
            </div>
        }
    </div>
</div>

@code {
#pragma warning disable AOAI001 // Type is for evaluation purposes only

    /// <summary>
    /// Stores the conversation history between the user and the AI, including
    /// both user messages and AI responses with their knowledge citations
    /// </summary>
    private List<ChatMessage> ChatHistory { get; set; } = new List<ChatMessage>();
    
    /// <summary>Current user input text</summary>
    private string CurrentQuery { get; set; } = string.Empty;
    
    /// <summary>Indicates whether a request is currently being processed</summary>
    private bool IsLoading { get; set; } = false;
    
    /// <summary>Stores error messages to display to the user</summary>
    private string? ErrorMessage { get; set; }

    protected override void OnInitialized()
    {
        // Initialization code if needed in the future
    }

    /// <summary>
    /// Handles the form submission when the user clicks the send button
    /// </summary>
    private void HandleFormSubmit()
    {
        if (!string.IsNullOrWhiteSpace(CurrentQuery) && !IsLoading)
        {
            _ = SendQuery();
        }
    }
    
    /// <summary>
    /// Sends a predefined query when a suggestion button is clicked
    /// </summary>
    private void SendQueryWithText(string text)
    {
        CurrentQuery = text;
        _ = SendQuery();
    }
    
    /// <summary>
    /// Processes the user query through the RAG system:
    /// 1. Adds the user message to the chat history
    /// 2. Sends the full conversation to the RAG service
    /// 3. The service retrieves relevant information from Azure AI Search
    /// 4. OpenAI generates a response grounded in the retrieved knowledge
    /// 5. Response with citations is added to the chat history
    /// </summary>
    private async Task SendQuery()
    {
        if (string.IsNullOrWhiteSpace(CurrentQuery) || IsLoading)
            return;

        try
        {
            ErrorMessage = null;
            IsLoading = true;
            
            // Add user message to chat history
            var userMessage = new UserChatMessage(CurrentQuery);
            ChatHistory.Add(userMessage);
            
            // Clear the input field
            string query = CurrentQuery;
            CurrentQuery = string.Empty;
            
            // Force UI update
            StateHasChanged();
            
            // Scroll to bottom after adding user message
            await ScrollChatToBottomAsync();
            
            // Process the query through the RAG service which integrates Azure AI Search with OpenAI
            var response = await ChatService.GetChatCompletionAsync(ChatHistory);
            
            if (!string.IsNullOrEmpty(response.Error))
            {
                ErrorMessage = response.Error;
                Logger.LogError("Error from chat service: {Error}", response.Error);
            }
            else if (response.Content == null || response.Content.Count == 0)
            {
                ErrorMessage = "No answer received from the AI service.";
                Logger.LogWarning("Empty answer received from chat service");
            }
            else
            {
                // Create a message that includes both generated content and knowledge citations
                var assistantMessage = new AssistantMessageWithCitations(response.Content, response.Citations);
                
                // Add the AI response with its knowledge citations to the chat history
                ChatHistory.Add(assistantMessage);
                
                // Scroll to bottom after message is rendered
                await ScrollChatToBottomAsync();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
            Logger.LogError(ex, "Error sending query");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }
    
    /// <summary>
    /// Handles keyboard input, sending the query when Enter is pressed
    /// </summary>
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(CurrentQuery) && !IsLoading)
        {
            await SendQuery();
        }
    }
    
    /// <summary>
    /// Formats the AI-generated content by replacing citation markers with interactive links
    /// that display the relevant knowledge source when clicked.
    /// 
    /// This is a key part of the RAG experience, making the citations from Azure AI Search
    /// accessible and interactive for the user.
    /// </summary>
    /// <param name="content">The AI response text containing citation markers like [doc1]</param>
    /// <param name="messageCitations">The list of citations from Azure AI Search</param>
    /// <returns>Formatted HTML with interactive citation links</returns>
    private string FormatWithCitations(string content, IReadOnlyList<ChatCitation>? messageCitations)
    {
        if (string.IsNullOrEmpty(content) || messageCitations == null || !messageCitations.Any())
        {
            return content?.Replace("\n", "<br>") ?? string.Empty;
        }
        
        // Format the answer by replacing [doc1], [doc2], etc. with interactive citation links
        var pattern = @"\[doc(\d+)\]";
        content = System.Text.RegularExpressions.Regex.Replace(content, pattern, match =>
        {
            if (int.TryParse(match.Groups[1].Value, out int index) && index > 0 && index <= messageCitations.Count)
            {
                var citation = messageCitations[index - 1];
                
                // Prepare the citation data for display in the popup
                var citationData = new Dictionary<string, object>
                {
                    ["title"] = citation.Title ?? "",
                    ["content"] = citation.Content ?? "",
                    ["filePath"] = citation.FilePath ?? "",
                    ["url"] = citation.Url ?? ""
                };
                
                var jsonOptions = new System.Text.Json.JsonSerializerOptions
                {
                    WriteIndented = false,
                    Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping
                };
                
                var citationJson = System.Text.Json.JsonSerializer.Serialize(citationData, jsonOptions);
                
                // Encode the JSON for HTML attribute to avoid escaping issues
                var encodedJson = System.Net.WebUtility.HtmlEncode(citationJson);
                
                // Create an interactive citation link that shows the knowledge source when clicked
                return $"<a id=\"citation-{index}\" class=\"badge bg-primary rounded-pill\" style=\"cursor: pointer;\" href=\"javascript:void(0)\" data-citation-index=\"{index}\" data-citation-data=\"{encodedJson}\">{index}</a>";
            }
            return match.Value;
        });
        
        // Convert line breaks to HTML breaks for proper display
        return content.Replace("\n", "<br>");
    }
    
    /// <summary>
    /// Scrolls the chat interface to show the most recent messages
    /// </summary>
    private async Task ScrollChatToBottomAsync()
    {
        try
        {
            // Allow a small delay for the DOM to update before scrolling
            await Task.Delay(50); 
            await JSRuntime.InvokeVoidAsync("scrollChatToBottom");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error scrolling chat to bottom");
        }
    }
    
    /// <summary>
    /// Initial setup and handling for the first render
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Scroll to bottom on first render if there are messages
            if (ChatHistory.Count > 0)
            {
                await ScrollChatToBottomAsync();
            }
        }
    }
}